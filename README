# README FOR VOLTAGE LOGGER
## ABOUT

Voltage logger is designed to read data from sensors and logging it in a threaded and
buffered fashion, ensuring that no measurement is lost due to IO problems. Data is
routed between custom modules by having "senders" specified for some of them, instructing
them who to read from. Source modules should have a buffer which they write to
independently from their readers. A buffer implementation is included.

## USAGE

Two test modules are provided, `dummy` and `raw`. Dummy is a source module who writes
messages to a buffer at fixed intervals. The `raw` module simply reads from the buffer,
clears it and dumps the data on the screen.

To start the program with these to modules with `raw` reading from `dummy`, run:

`vlogger module=raw,voltmonitor`

To start the program with `raw` reading from two modules:

`vlogger module=raw,voltmonitor,dummy`

To start a chain with three modules `voltmonitor->averager->raw`:

`vlogger module=raw,averager module=averager,voltmonitor`

A module can also be specified on its own:

`vlogger module=custom_module`

## INTERNAL MESSAGE TYPES

An internal message contains some metadata and a class specifier which tells us what kind of
information and/or value it stores.
* Metadata for a message:
  * `Timestamp from` and `Timestamp to`
    Specifies the duration of the message. The timestamps can be equal if a message has no
    timespan.
    * `MSG`
  * `Class`
    The message class which describes what kind of information it stores:
    * `POINT`: Measurement at one time instance
    * `AVG`, `MIN`, `MAX`: Average, minimum or maximum measurement over a timespan. In the case
      of `MIN` or `MAX`, the actual time of the minimum or maximum measurement is store in
      `Timestamp to`. `Timestamp from` contains the end time of the measurement timestamp, and
      the start time can be found by checking the from-timestamp of the previous measurement.
    * `INFO`: Usally information in text, for instance to log error conditions.
  * `Data`
    Textual representation of the data in the message
  * `Numeric value`
    Messages containing measurements store these both in text format and binary format to make
    them easier to process. When sent over network, this numeric representation may be lost, but
    it can be restored from the text field.
* Types of messages
  * `MSG`: An actual message with a measurement or information
  * `ACK`: Acknowledgement of packet recieval when it is sent over network.
  * `TAG`: These messages usually inform that a message has been safely stored remotely.
`ACK` and `TAG` messages contain the full original message (maybe except for the numeric value)
making modules able to match them with the original message.

## MODULES

### voltmonitor (USB voltmeter driver)

`vlogger module=raw,voltmonitor vm_calibration=1.020 vm_channel=2`

Specifiy channel (1 or 2) and/or calibration (factor which scales input).

### averager (create averages from voltmonitor)

`vlogger module=averager,voltmonitor module=raw,averager`

Create MAX/MIN/AVG measurements every 10 seconds with input from voltmonitor.

### ipclient (Send UDP packets to server)
`vlogger module=ipclient,dummy ipclient_server=10.0.2.2 ipclient_server_port=5555`

### blockdev (log messages to block device or file)
`vlogger module=blockdev,voltmonitor device_path=DEVICE always_tag_saved={yes|no}`

Specify block device or file to log entries, this storage must first be initialized
using Block Device Logger command line application.

Messages stored on the device will be re-read into memory on start-up untill they are
tagged as saved. The mysql-module can generate such tag messages, or one can specify
always_tag_saved=yes, in which all messages are tagged immediately when first stored.
This should be specified if there are no modules listending to blockdev.

### mysql (store messages to database)
Mysql reads data from ipserver and stores to a database.

`vlogger module=mysql,ipserver module=ipserver,mysql [mysql_no_tagging={yes|no}] [mysql_host=HOST] [mysql_port=PORT] mysql_user=USER mysql_password=PASSWORD mysql_db=DATABASE mysql_table=TABLE`

Unless `mysql_no_tagging` is set, mysql generates TAG messages which can be processed
by the blockdev module, these are sent back to the originating IP address.

A table can should this, but it may have additional columns:

	CREATE TABLE `entries` (
		`timestamp` bigint(20) UNSIGNED NOT NULL,
		`source` varchar(50) NOT NULL,
		`class` tinyint(3) UNSIGNED NOT NULL,
		`time_from` bigint(20) UNSIGNED NOT NULL,
		`time_to` bigint(20) UNSIGNED NOT NULL,
		`value` bigint(20) NOT NULL,
		`message` varchar(255) NOT NULL,
		`message_length` int(10) UNSIGNED NOT NULL
	) ENGINE=InnoDB DEFAULT CHARSET=latin1;

The `source` is the IP address of the sender. The first three columns should be defined
as `PRIMARY KEY` or a `UNIQUE` key to prevent duplicates.

### ipserver (receive messages from ipclient)
`ipserver` listens for messages from `ipclient` on port 5555 and passes them on to the next module (only mysql
is compatible). We send ACK messages back for every message received. Downstream modules (usually mysql)
can generate messages which we also send back.

`vlogger module=mysql,ipserver module=ipserver,mysql`

### controller (oordinate messages between averager, blockdev and ipclient)

The intention of this module is to store messages locally untill they are recevied and stored by a remote
server, even in case of a power failure.

`vlogger module=averager,voltmonitor module=controller,blockdev,ipclient,averager module=ipclient,controller module=blockdev,controller`

This will create a network like this:

	+-------------+    +----------+    +------------+     +----------+
	| voltmonitor | => | averager | => |            | <=> | blockdev |
	+-------------+    +----------+    |            |     +----------+
	                                   | controller |
	                                   |            |     +----------+
	                                   |            | <=> | ipclient |
	                                   +------------+     +----------+

- All messages from `averager` are sent both to `blockdev` and `ipclient`
- All messages from `blockdev` are sent to `ipclient`
- TAG messages from `ipclient` are sent to `blockdev`

This setup will save messages to `blockdev` and keep on sending them through `ipclient` untill a final
TAG message is received.

## CONTACT

github.com/atlesn/voltagelogger
